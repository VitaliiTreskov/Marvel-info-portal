{"version":3,"sources":["components/spinner/Spinner.js","services/MarvelService.js","hooks/http.hook.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/Main.Page.js","components/comicsList/ComicsList.js","resources/img/UW.png","resources/img/x-men.png","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/ComicsPage.js","components/pages/404.js","components/pages/SingleComicPage.js","components/appHeader/AppHeader.js","components/app/App.js","index.js"],"names":["Spinner","xmlns","style","margin","background","display","width","height","viewBox","preserveAspectRatio","transform","cx","cy","r","fill","fillOpacity","attributeName","type","begin","values","keyTimes","dur","repeatCount","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","character","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","getComicsList","_transformComics","getComic","title","pageCount","language","textObjects","price","prices","ErrorMessage","hight","objectFit","src","img","alt","View","imgClass","indexOf","className","href","RandomChar","setCharacter","useEffect","updateCharacter","onCharacterLoaded","Math","floor","random","then","errorMessage","spinner","content","onClick","mjolnir","CharList","props","charactersList","setCharactersList","newItemLoading","setNewItemLoading","setOffset","characterEnded","setCharacterEnded","getCharacters","initial","onCharacterListLoaded","newCharactersList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","ref","classList","remove","add","focus","arr","item","i","imgStyle","tabIndex","elem","onCharacterSelected","onKeyPress","event","key","renderItems","disabled","Skeleton","CharInfo","characterId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","MainPage","selectedCharacter","setSelectedCharacter","decoration","ComicsList","comicsList","setComicsList","comicsEnded","setComicsEnded","getComics","onComicsLoaded","newComicsList","to","AppBanner","avengers","avengersLogo","ComicsPage","Page404","comic","SingleComicPage","comicId","useParams","setComic","updateComic","onComicLoaded","AppHeader","exact","activeStyle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a6eed26.chunk.js","sourcesContent":["const Spinner = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" style={{margin: '0 auto', background: 'none', display: 'block'}} width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\r\n            <g transform=\"translate(80,50)\">\r\n            <g transform=\"rotate(0)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"1\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.875s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.875s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(71.21320343559643,71.21320343559643)\">\r\n            <g transform=\"rotate(45)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.875\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.75s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.75s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(50,80)\">\r\n            <g transform=\"rotate(90)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.75\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.625s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.625s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(28.786796564403577,71.21320343559643)\">\r\n            <g transform=\"rotate(135)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.625\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.5s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.5s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(20,50.00000000000001)\">\r\n            <g transform=\"rotate(180)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.5\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.375s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.375s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(28.78679656440357,28.786796564403577)\">\r\n            <g transform=\"rotate(225)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.375\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.25s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.25s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(49.99999999999999,20)\">\r\n            <g transform=\"rotate(270)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.25\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.125s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.125s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(71.21320343559643,28.78679656440357)\">\r\n            <g transform=\"rotate(315)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.125\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"0s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"0s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Spinner;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=00ae2959aaae5275a6828832c52b7182';\r\n    const _baseOffset = 210; //это базовая величина отступа от начала списка персонажей\r\n\r\n    \r\n    //Функция заменена на хук useHttp \r\n    // getResource = async (url) => {\r\n    //     let res = await fetch(url);\r\n\r\n    //     if(!res.ok) {\r\n    //         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n    //     }\r\n\r\n    //     return await res.json();\r\n    // }\r\n\r\n    // getAllCharacters = () => {\r\n    //         return this.getResource('https://gateway.marvel.com:443/v1/public/characters?limit=9&offset=210&apikey=00ae2959aaae5275a6828832c52b7182');\r\n    //     }\r\n    \r\n    // getCharacter = (id) => {\r\n    //         return this.getResource(`https://gateway.marvel.com:443/v1/public/characters/${id}?apikey=00ae2959aaae5275a6828832c52b7182`);\r\n    //     }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {//передаем аргумент по умолчанию, если аргумент передан, то он подставляется, если не передан, то подставляется _baseOffset\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter); //В мар подставляется колбэк-функция, к-я будет вызываться\r\n        //для каждого элемента массива results.\r\n        //data.results - это объекты из данных, которые приходят с сервера\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        //request - асинхронная функция, мы не знаем сколько времени будет идти ответ от сервера\r\n        //поэтому ставим async - await, чтобы дождаться выполнения функции request и записать значение в переменную res\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n\r\n    //метод для трансформации данных, полученных от сервера. Получаем от сервера res, а возвращаем только то, что нам нужно\r\n    //свойства зависят от вида данных\r\n    const _transformCharacter = (character) => {\r\n        return {\r\n            id: character.id,\r\n            name: character.name,\r\n            description: character.description ? `${character.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: character.thumbnail.path + '.' + character.thumbnail.extension,\r\n            homepage: character.urls[0].url,\r\n            wiki: character.urls[1].url,\r\n            comics: character.comics.items\r\n        }\r\n    }\r\n\r\n    const getComicsList = async (offset = 0) => {\r\n        const response = await request(`${_apiBase}comics?&limit=8&offset=${offset}&${_apiKey}`);\r\n\r\n        // https://gateway.marvel.com:443/v1/public/comics?limit=8&offset=0&apikey=00ae2959aaae5275a6828832c52b7182\r\n        return response.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const response = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(response.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : `n/a`\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getComicsList, getComic} \r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\n\r\n//пользовательских хук, будет реализовывать функционал, повторяющийся в разных компонентах\r\n//изменение состояния - загрузка, ошибка(при запросе к серверу)\r\n//запрос на сервер\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    //используем useCallback, т.к. функцию запросов на сервер будем в том числе передавать в дочерние компоненты и это\r\n    //поможет избежать их лишней перерисовки\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => \r\n        {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false); //загрузка завершилась, состояние изменено на false\r\n            return data; //функция возвращает данные, полученные с сервера\r\n        \r\n        //блок для обработки ошибки при запросе к серверу\r\n        } catch(e) {\r\n            setLoading(false); //загрузка завершилась (даже если и с ошибкой)\r\n            setError(e.message);//в состояние запишем сообщение об ошибке\r\n            throw e;\r\n        } \r\n\r\n        }, [])\r\n\r\n    //функция для обнуления сообщения об ошибке\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}\r\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', hight: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"Error\"/>\r\n    )\r\n}\r\nexport default ErrorMessage;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\n\nimport Spinner  from '../spinner/Spinner';\n// import useMarvelService from '../../services/MarvelService';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './randomChar.scss';\n\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n//Компонент показывающий случайного персонажа\nconst RandomChar = () => {\n    \n    const [character, setCharacter] = useState(null);\n    \n    // доступ к серверным функциям и состоянию\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateCharacter();\n    }, []);\n    \n    // useEffect(() => {\n    //     const timerId = setInterval(updateCharacter, 30000);\n\n    //     //отключение интервала таймера\n    //     return() => {\n    //         clearInterval(timerId);\n    //     }\n\n    // }, []);\n\n    //методы для отображения процесса загрузки и ошибки сервера теперь прописаны в хуке useHttp\n    // const onCharacterLoading = () => {\n    //     setLoading(true);\n    // }\n\n    // const onError = () => {\n    //     setLoading(false);\n    //     setError(true); //для отображения сообщения пользователю создал компонент ErrorMessage\n    // }\n\n    //изменение состояния компонента\n    const onCharacterLoaded = (character) => {\n        setCharacter(character);\n        // setLoading(false); //как только данные character загрузились, переводим loading в false (уже есть в хуке)\n    }   \n\n    //обновление персонажа\n    const updateCharacter = () => {\n        clearError(); //удаление сообщения об ошибке\n        //получаем случайный id персонажа, обращаемся к серверным функциям и получаем с сервера данные персонажа по уникальному id (getCharacter(id))\n        //после получения данных с сервера, методом onCharacterLoaded() обновляется состояние компонента\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        // onCharacterLoading(); //(в хуке useHttp)\n        // marvelService //(в хуке useMarvelService)\n        getCharacter(id).then(onCharacterLoaded);\n            // .catch(onError) //в хуке useHttp\n    }\n\n        //\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !character) ? <View character={character}/> : null;\n\n        //Если loading == true, то отображается компонент спиннер, иначе компонент View\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button onClick={updateCharacter} className=\"button button__main\">\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n}\n\n//Компонент для рендеринга html разметки, принимает в себя данные и отображает их на странице\nconst View =({character}) => {\n    const {name, description, thumbnail, homepage, wiki} = character;\n    const imgClass = thumbnail.indexOf('image_not_available') > -1 ? 'randomchar__img contain' : 'randomchar__img';\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className={imgClass} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef} from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './charList.scss';\nimport '../../style/button.scss';\n\n\n\nconst CharList = (props) => {\n\n    const[charactersList, setCharactersList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);    //загрузка новых карточек с персонажами\n    const [offset, setOffset] = useState(210);                      //отступ от начала списка персонажей\n    const [characterEnded, setCharacterEnded] = useState(false);    //список персонажей закончился\n\n    //для доступа к серверным функциям\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    //исп. useEffect как аналог compenentDidMount\n    //оставляем пустой массив зависимостей, за которым следит хук -\n    // функция в нем выполнится только один раз при первой отрисовке компонента\n\n    //когда компонент создан, вызывается метод getCharacters без аргумента offset (т.е. туда подставится базовое значение 210)\n    \n    useEffect(() => {\n        getCharacters(offset, true);\n    }, [])\n\n\n    //метод для получения объекта с данными персонажей с сервера\n    //initial - булинь указывающий - это первая загрузка персонажей или это загрузка 9-новых\n    const getCharacters = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)    //получение новых персонажей с отступом от начала списка персонажей\n        .then(onCharacterListLoaded); //здесь объект, пришедший от сервера будет подставляться в метод onCharacterListLoaded\n    }\n\n    //метод для изменения состояния компонента\n    //\n    const onCharacterListLoaded = (newCharactersList) => { //аргумент - массив с данными о 9-ти новых персонажей (при первом запуске сюда придет пустой массив)\n        //проверка, закончились ли персонажи\n        let ended = false;\n        if(newCharactersList.length < 9) {\n            ended = true;\n        }\n\n        //передаем аргумент charactersList - это предыдущее состояние\n        //передаем колбэк т.к. новое состояние зависит от старого \n        setCharactersList(charactersList => [...charactersList, ...newCharactersList]);\n        \n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharacterEnded(characterEnded => ended);       \n        }\n\n//создаем массив ссылок на элементы DOM структуры\n//useRef можно использовать только на верхнем уровне компонента\nconst itemRefs = useRef([]);\n\n//в itemRefs - массив, внутри свойство current. У каждого элемента массива (а это ссылка на элемент DOM) будет удаляться класс\n//внутри массива находим элемент по id и добавляем ему класс, а также вызываем метод focus\n\nconst focusOnItem = (id) => {\n    itemRefs.current.forEach(ref => ref.classList.remove('char__item_selected'));\n    itemRefs.current[id].classList.add('char__item_selected');\n    itemRefs.current[id].focus();\n}\n\n    \nfunction renderItems (arr) {\n        const items = arr.map((item, i) => {\n\n            let imgStyle = {'objectFit' : 'cover'};\n            if(item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n            //при клике на карточку с персонажем в метод onCharSelected() передается id персонажа\n            //этот id в компоненте App будет передаваться в компонент CharInfo\n\n            // element - это ссылка на DOM элемент, он будет добавляться в массив itemRefs\n            //это нужно для фокусировки на карточках персонажей\n            return (\n                <li className=\"char__item\"\n                    key={item.id}\n                    tabIndex={0}\n                    ref={elem => itemRefs.current[i] = elem}\n                    onClick={\n                        () => {\n                            props.onCharacterSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(event) => {\n                            if(event.key === '' || event.key === \"Enter\") {\n                                props.onCharacterSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}\n                >\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // Вынесено для центровки спиннера/сообщения об ошибке\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n        const items = renderItems(charactersList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading && !newItemLoading ? <Spinner/> : null; //спиннер будет грузиться только если состояние loading==true, newItemLoading==false - т.е. это не загрузка новых 9-ти карточек\n        // const content = !(loading || error) ? items : null;\n        \n        //добавил атрибут disabled, когда происходит загрузка новых карточек с персонажами\n        //добавлен инлайн стиль, если персонажи закончились, то кнопка не отображается\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {items}\n                <button\n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{'display' : characterEnded ? 'none' : 'block'}}\n                    onClick={() => getCharacters(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n}\n\nCharList.propTypes = {\n    onCharacterSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import PropTypes from 'prop-types'; \nimport { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\n\n\n\nconst CharInfo = (props) => {\n    \n    const [character, setCharacter] = useState(null);\n    \n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateCharacter()\n    }, [props.characterId]);\n\n    //из пропсов приходит состояние компонента App (id персонажа), по нему обращаемся к серверу\n    const updateCharacter = () => {\n        const {characterId} = props;\n        if(!characterId) {\n            return;\n        }\n        clearError();    \n        getCharacter(characterId)\n            .then(onCharacterLoaded);\n    }\n\n    //изменение состояния компонента\n    const onCharacterLoaded = (character) => {\n        setCharacter(character);\n    }\n\n        //задаем начальное состояние компонента. Если пришли данные от сервера на персонаж, данные грузятся или произошла ошибка,\n        //то в переменную skeleton записывается null, иначе в нее помещается компонент Skeleton\n        const skeleton = character || loading || error ? null : <Skeleton/>;\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !character) ? <View character={character}/> : null;\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n}\n\n//Это компонент для рендеринга\nconst View = ({character}) => {\n\n    const {name, description, thumbnail, homepage, wiki, comics} = character;\n\n    let imgStyle = { 'objectFit': 'cover' };\n        if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'unset' };\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There are no comics with this character'}\n                {\n                    comics.map((item, i)=> {\n                        if(i > 9) return; //ограничим количество комиксов, которое выводится на страницу\n                        return (\n                            <li className=\"char__comics-item\"\n                            key={i}>\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }   \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    characterId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react/cjs/react.production.min\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    //состояние меняется на ошибку\r\n    componentDidCatch(error, errorInfo){\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n    //отрисовывается сообщение об ошибке \r\n    render () {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary; //будет применяться в компоненте App","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedCharacter, setSelectedCharacter] = useState(null);\r\n\r\n    //метод чтобы записать в состояние id выбранного персонажа\r\n    const onCharacterSelected = (id) => {\r\n        setSelectedCharacter(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharacterSelected={onCharacterSelected} />\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo characterId={selectedCharacter} />\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import './comicsList.scss';\nimport { useState, useEffect } from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport uw from '../../resources/img/UW.png';\nimport xMen from '../../resources/img/x-men.png';\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [offset, setOffset] = useState(0);\n    const [newItemLoading, setNewItemLoading] = useState(false);    //загрузка новых карточек с комиксами\n    const [comicsEnded, setComicsEnded] = useState(false);    //список персонажей комиксами\n\n    const {loading, error, getComicsList} = useMarvelService();\n\n    useEffect(()=> {\n        getComics(offset, true)\n    }, []);\n\n    const getComics = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getComicsList(offset).then(onComicsLoaded);\n    }\n\n    const onComicsLoaded = (newComicsList) => {\n        let ended = false;\n        // if(newComicsList.length < 8) {\n        //     ended = true;\n        // }\n        newComicsList.length < 8 ? ended = true : ended = false;\n\n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems (arr) {\n        const items = arr.map((item, i) => {\n\n            return (\n                <li className=\"comics__item\" key={item.id}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(comicsList);\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            \n            <button \n                disabled={newItemLoading}\n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                onClick={() => getComics(offset)}\n                className=\"button button__main button__long\">\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","export default __webpack_public_path__ + \"static/media/UW.422636b4.png\";","export default __webpack_public_path__ + \"static/media/x-men.41b39e19.png\";","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import ErrorMessage from \"../errorMessage/ErrorMessage\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\n\r\nconst Page404 = () => {\r\n    return (\r\n        <div>\r\n            <ErrorMessage/>\r\n            <p style={{'textAlign': 'center', 'fontWeight': 'bold', 'fontSize': '24px'}}>Page does not exist</p>\r\n            <Link style={{'display': 'block', 'textAlign': 'center', 'fontWeight': 'bold', 'fontSize': '24px', 'margiTop': '30px'}}\r\n            to=\"/\" >Back to main page</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Page404;","import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport './singleComicPage.scss';\r\n\r\n\r\nconst SingleComicPage = () => {\r\n    const {comicId} = useParams();\r\n    const [comic, setComic] = useState(null);\r\n    const {loading, error, getComic, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateComic();\r\n    }, [comicId]);\r\n\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n        getComic(comicId).then(onComicLoaded)\r\n    }\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\r\n    \r\n    return (\r\n        <>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n    const {title, description, pageCount, thumbnail, language, price} = comic;\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">X-Men: Days of Future Past</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;","import './appHeader.scss';\nimport { Link, NavLink } from 'react-router-dom';\n\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <Link to=\"/\">\n                    <span>Marvel</span> information portal\n                </Link>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><NavLink exact activeStyle={{'color': '#9f0013'}} to=\"/\">Characters</NavLink></li>\n                    /\n                    <li><NavLink activeStyle={{'color': '#9f0013'}} to=\"/comics\">Comics</NavLink></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","import { BrowserRouter as Router, Route, Switch} from \"react-router-dom/cjs/react-router-dom\";\nimport { MainPage, ComicsPage, Page404, SingleComicPage} from \"../pages\";\nimport AppHeader from \"../appHeader/AppHeader\";\n\nconst App = () => {    \n\n        //метод onCharacterSelected передается в компонент ListChar, там у каждой карточки обработчик события, и получает id персонажа\n        //id персонажа записывается в состояние компонента App, и передается в компонент characterId\n        return (\n            <Router>\n                <div className=\"app\">\n                    <AppHeader />\n                    <main>\n                        <Switch>\n                            <Route exact path=\"/\">\n                                <MainPage/>\n                            </Route>\n                            <Route exact path=\"/comics\">\n                                <ComicsPage/>\n                            </Route>\n                            <Route exact path=\"/comics/:comicId\">\n                                <SingleComicPage/>\n                            </Route>\n                            <Route path=\"*\">\n                                <Page404/>\n                            </Route>\n                        </Switch>\n                    </main>\n                </div>\n            </Router>\n        )\n        \n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n// import useMarvelService from './services/MarvelService';\nimport './style/style.scss';\n\n\n// const marvelService = useMarvelService();\n\n// marvelService.getAllCharacters().then(res => console.log(res));\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}