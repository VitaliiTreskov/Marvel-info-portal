{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/characterSearchForm/CharcterSearchForm.js","components/pages/Main.Page.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","character","name","description","thumbnail","homepage","wiki","imgClass","indexOf","className","src","alt","href","RandomChar","useState","setCharacter","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateCharacter","onCharacterLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charactersList","setCharactersList","newItemLoading","setNewItemLoading","offset","setOffset","characterEnded","setCharacterEnded","getAllCharacters","getCharacters","initial","onCharacterListLoaded","newCharactersList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","ref","classList","remove","add","focus","items","arr","map","item","i","imgStyle","tabIndex","elem","onCharacterSelected","onKeyPress","event","key","style","renderItems","disabled","Skeleton","comics","CharInfo","characterId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","CharacterSearchForm","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","MainPage","selectedCharacter","setSelectedCharacter","Helmet","decoration","display","width","hight","objectFit","margin","img","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","result","_transformCharacter","res","slice","path","extension","urls","getComicsList","_transformComics","getComic","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/6.0a547a5b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\n\nimport Spinner  from '../spinner/Spinner';\n// import useMarvelService from '../../services/MarvelService';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './randomChar.scss';\n\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n//Компонент показывающий случайного персонажа\nconst RandomChar = () => {\n    \n    const [character, setCharacter] = useState(null);\n    \n    // доступ к серверным функциям и состоянию\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateCharacter();\n    }, []);\n    \n    // useEffect(() => {\n    //     const timerId = setInterval(updateCharacter, 30000);\n\n    //     //отключение интервала таймера\n    //     return() => {\n    //         clearInterval(timerId);\n    //     }\n\n    // }, []);\n\n    //методы для отображения процесса загрузки и ошибки сервера теперь прописаны в хуке useHttp\n    // const onCharacterLoading = () => {\n    //     setLoading(true);\n    // }\n\n    // const onError = () => {\n    //     setLoading(false);\n    //     setError(true); //для отображения сообщения пользователю создал компонент ErrorMessage\n    // }\n\n    //изменение состояния компонента\n    const onCharacterLoaded = (character) => {\n        setCharacter(character);\n        // setLoading(false); //как только данные character загрузились, переводим loading в false (уже есть в хуке)\n    }   \n\n    //обновление персонажа\n    const updateCharacter = () => {\n        clearError(); //удаление сообщения об ошибке\n        //получаем случайный id персонажа, обращаемся к серверным функциям и получаем с сервера данные персонажа по уникальному id (getCharacter(id))\n        //после получения данных с сервера, методом onCharacterLoaded() обновляется состояние компонента\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        // onCharacterLoading(); //(в хуке useHttp)\n        // marvelService //(в хуке useMarvelService)\n        getCharacter(id).then(onCharacterLoaded);\n            // .catch(onError) //в хуке useHttp\n    }\n\n        //\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !character) ? <View character={character}/> : null;\n\n        //Если loading == true, то отображается компонент спиннер, иначе компонент View\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button onClick={updateCharacter} className=\"button button__main\">\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n}\n\n//Компонент для рендеринга html разметки, принимает в себя данные и отображает их на странице\nconst View =({character}) => {\n    const {name, description, thumbnail, homepage, wiki} = character;\n    const imgClass = thumbnail.indexOf('image_not_available') > -1 ? 'randomchar__img contain' : 'randomchar__img';\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className={imgClass} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef} from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './charList.scss';\nimport '../../style/button.scss';\n\n\n\nconst CharList = (props) => {\n\n    const[charactersList, setCharactersList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);    //загрузка новых карточек с персонажами\n    const [offset, setOffset] = useState(210);                      //отступ от начала списка персонажей\n    const [characterEnded, setCharacterEnded] = useState(false);    //список персонажей закончился\n\n    //для доступа к серверным функциям\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    //исп. useEffect как аналог compenentDidMount\n    //оставляем пустой массив зависимостей, за которым следит хук -\n    // функция в нем выполнится только один раз при первой отрисовке компонента\n\n    //когда компонент создан, вызывается метод getCharacters без аргумента offset (т.е. туда подставится базовое значение 210)\n    \n    useEffect(() => {\n        getCharacters(offset, true);\n    }, [])\n\n\n    //метод для получения объекта с данными персонажей с сервера\n    //initial - булинь указывающий - это первая загрузка персонажей или это загрузка 9-новых\n    const getCharacters = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)    //получение новых персонажей с отступом от начала списка персонажей\n        .then(onCharacterListLoaded); //здесь объект, пришедший от сервера будет подставляться в метод onCharacterListLoaded\n    }\n\n    //метод для изменения состояния компонента\n    //\n    const onCharacterListLoaded = (newCharactersList) => { //аргумент - массив с данными о 9-ти новых персонажей (при первом запуске сюда придет пустой массив)\n        //проверка, закончились ли персонажи\n        let ended = false;\n        if(newCharactersList.length < 9) {\n            ended = true;\n        }\n\n        //передаем аргумент charactersList - это предыдущее состояние\n        //передаем колбэк т.к. новое состояние зависит от старого \n        setCharactersList(charactersList => [...charactersList, ...newCharactersList]);\n        \n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharacterEnded(characterEnded => ended);       \n        }\n\n//создаем массив ссылок на элементы DOM структуры\n//useRef можно использовать только на верхнем уровне компонента\nconst itemRefs = useRef([]);\n\n//в itemRefs - массив, внутри свойство current. У каждого элемента массива (а это ссылка на элемент DOM) будет удаляться класс\n//внутри массива находим элемент по id и добавляем ему класс, а также вызываем метод focus\n\nconst focusOnItem = (id) => {\n    itemRefs.current.forEach(ref => ref.classList.remove('char__item_selected'));\n    itemRefs.current[id].classList.add('char__item_selected');\n    itemRefs.current[id].focus();\n}\n\n    \nfunction renderItems (arr) {\n        const items = arr.map((item, i) => {\n\n            let imgStyle = {'objectFit' : 'cover'};\n            if(item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n            //при клике на карточку с персонажем в метод onCharSelected() передается id персонажа\n            //этот id в компоненте App будет передаваться в компонент CharInfo\n\n            // element - это ссылка на DOM элемент, он будет добавляться в массив itemRefs\n            //это нужно для фокусировки на карточках персонажей\n            return (\n                <li className=\"char__item\"\n                    key={item.id}\n                    tabIndex={0}\n                    ref={elem => itemRefs.current[i] = elem}\n                    onClick={\n                        () => {\n                            props.onCharacterSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(event) => {\n                            if(event.key === '' || event.key === \"Enter\") {\n                                props.onCharacterSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}\n                >\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // Вынесено для центровки спиннера/сообщения об ошибке\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n        const items = renderItems(charactersList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading && !newItemLoading ? <Spinner/> : null; //спиннер будет грузиться только если состояние loading==true, newItemLoading==false - т.е. это не загрузка новых 9-ти карточек\n        // const content = !(loading || error) ? items : null;\n        \n        //добавил атрибут disabled, когда происходит загрузка новых карточек с персонажами\n        //добавлен инлайн стиль, если персонажи закончились, то кнопка не отображается\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {items}\n                <button\n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{'display' : characterEnded ? 'none' : 'block'}}\n                    onClick={() => getCharacters(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n}\n\nCharList.propTypes = {\n    onCharacterSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import PropTypes from 'prop-types'; \nimport { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\n\n\n\nconst CharInfo = (props) => {\n    \n    const [character, setCharacter] = useState(null);\n    \n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateCharacter()\n    }, [props.characterId]);\n\n    //из пропсов приходит состояние компонента App (id персонажа), по нему обращаемся к серверу\n    const updateCharacter = () => {\n        const {characterId} = props;\n        if(!characterId) {\n            return;\n        }\n        clearError();    \n        getCharacter(characterId)\n            .then(onCharacterLoaded);\n    }\n\n    //изменение состояния компонента\n    const onCharacterLoaded = (character) => {\n        setCharacter(character);\n    }\n\n        //задаем начальное состояние компонента. Если пришли данные от сервера на персонаж, данные грузятся или произошла ошибка,\n        //то в переменную skeleton записывается null, иначе в нее помещается компонент Skeleton\n        const skeleton = character || loading || error ? null : <Skeleton/>;\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !character) ? <View character={character}/> : null;\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n}\n\n//Это компонент для рендеринга\nconst View = ({character}) => {\n\n    const {name, description, thumbnail, homepage, wiki, comics} = character;\n\n    let imgStyle = { 'objectFit': 'cover' };\n        if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'unset' };\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There are no comics with this character'}\n                {\n                    comics.map((item, i)=> {\n                        if(i > 9) return; //ограничим количество комиксов, которое выводится на страницу\n                        return (\n                            <li className=\"char__comics-item\"\n                            key={i}>\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }   \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    characterId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react/cjs/react.production.min\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    //состояние меняется на ошибку\r\n    componentDidCatch(error, errorInfo){\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n    //отрисовывается сообщение об ошибке \r\n    render () {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary; //будет применяться в компоненте App","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './characterSearchForm.scss';\r\n\r\nconst CharacterSearchForm = () => {\r\n    const [character, setCharacter] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharacterLoaded = (character) => {\r\n        setCharacter(character);\r\n    }\r\n\r\n    const updateCharacter = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharacterLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !character ? null : character.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {character[0].name} page?</div>\r\n                        <Link to={`/characters/${character[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateCharacter(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharacterSearchForm;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharacterSearchForm from \"../characterSearchForm/CharcterSearchForm\";\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedCharacter, setSelectedCharacter] = useState(null);\r\n\r\n    //метод чтобы записать в состояние id выбранного персонажа\r\n    const onCharacterSelected = (id) => {\r\n        setSelectedCharacter(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title> \r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharacterSelected={onCharacterSelected} />\r\n                </ErrorBoundary>\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <CharInfo characterId={selectedCharacter} />\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharacterSearchForm/>\r\n                </ErrorBoundary>\r\n            </div>\r\n                \r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', hight: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"Error\"/>\r\n    )\r\n}\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=00ae2959aaae5275a6828832c52b7182';\r\n    const _baseOffset = 210; //это базовая величина отступа от начала списка персонажей\r\n\r\n    \r\n    //Функция заменена на хук useHttp \r\n    // getResource = async (url) => {\r\n    //     let res = await fetch(url);\r\n\r\n    //     if(!res.ok) {\r\n    //         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n    //     }\r\n\r\n    //     return await res.json();\r\n    // }\r\n\r\n    // getAllCharacters = () => {\r\n    //         return this.getResource('https://gateway.marvel.com:443/v1/public/characters?limit=9&offset=210&apikey=00ae2959aaae5275a6828832c52b7182');\r\n    //     }\r\n    \r\n    // getCharacter = (id) => {\r\n    //         return this.getResource(`https://gateway.marvel.com:443/v1/public/characters/${id}?apikey=00ae2959aaae5275a6828832c52b7182`);\r\n    //     }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const result = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return result.data.results.map(_transformCharacter);\r\n    }\r\n    \r\n    const getAllCharacters = async (offset = _baseOffset) => {//передаем аргумент по умолчанию, если аргумент передан, то он подставляется, если не передан, то подставляется _baseOffset\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter); //В мар подставляется колбэк-функция, к-я будет вызываться\r\n        //для каждого элемента массива results.\r\n        //data.results - это объекты из данных, которые приходят с сервера\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        //request - асинхронная функция, мы не знаем сколько времени будет идти ответ от сервера\r\n        //поэтому ставим async - await, чтобы дождаться выполнения функции request и записать значение в переменную res\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n\r\n    //метод для трансформации данных, полученных от сервера. Получаем от сервера res, а возвращаем только то, что нам нужно\r\n    //свойства зависят от вида данных\r\n    const _transformCharacter = (character) => {\r\n        return {\r\n            id: character.id,\r\n            name: character.name,\r\n            description: character.description ? `${character.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: character.thumbnail.path + '.' + character.thumbnail.extension,\r\n            homepage: character.urls[0].url,\r\n            wiki: character.urls[1].url,\r\n            comics: character.comics.items\r\n        }\r\n    }\r\n\r\n    const getComicsList = async (offset = 0) => {\r\n        const response = await request(`${_apiBase}comics?&limit=8&offset=${offset}&${_apiKey}`);\r\n\r\n        // https://gateway.marvel.com:443/v1/public/comics?limit=8&offset=0&apikey=00ae2959aaae5275a6828832c52b7182\r\n        return response.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const response = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(response.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : `n/a`\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getComicsList, getComic, getCharacterByName } \r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\n\r\n//пользовательских хук, будет реализовывать функционал, повторяющийся в разных компонентах\r\n//изменение состояния - загрузка, ошибка(при запросе к серверу)\r\n//запрос на сервер\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    //используем useCallback, т.к. функцию запросов на сервер будем в том числе передавать в дочерние компоненты и это\r\n    //поможет избежать их лишней перерисовки\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => \r\n        {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false); //загрузка завершилась, состояние изменено на false\r\n            return data; //функция возвращает данные, полученные с сервера\r\n        \r\n        //блок для обработки ошибки при запросе к серверу\r\n        } catch(e) {\r\n            setLoading(false); //загрузка завершилась (даже если и с ошибкой)\r\n            setError(e.message);//в состояние запишем сообщение об ошибке\r\n            throw e;\r\n        } \r\n\r\n        }, [])\r\n\r\n    //функция для обнуления сообщения об ошибке\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}\r\n"],"sourceRoot":""}